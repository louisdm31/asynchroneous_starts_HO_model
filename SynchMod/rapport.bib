@article{model_ho,
	author = "Bernadette Charron-Bost - André Shiper",
	title = "The Heard-Of model: computing in distributed systems with benign faults",
	DOI = "https://doi.org/10.1007/s00446-009-0084-6",
	year = 2009
}

@article{firing_squad,
	author = "Bernadette Charron-Bost - Shlomo Moran",
	title = "The firing squad problem revisited",
	year = 2019,
	DOI = "https://doi.org/10.1016/j.tcs.2019.07.023"
}

@article{dds,
	author = "Dolev - Dwork - Stockmeyer",
	title = "On the minimal synchronism needed for distributed consensus",
	year = 1992,
	DOI = "https://doi.org/10.1145/7531.7533"
}

@article{HO_isa,
  author  = {Henri Debrat - Stephan Merz},
  title   = {Verifying Fault-Tolerant Distributed Algorithms in the Heard-Of Model},
  journal = {Archive of Formal Proofs},
  month   = jul,
  year    = 2012,
  note    = {\url{http://isa-afp.org/entries/Heard_Of.html},
            Formal proof development},
  ISSN    = {2150-914x},
}

@article{otr,
    title="Solving consensus in opportunistic networks"
    author="Benchi, Abdulkader and Launay, Pascale and Guidec, Frederic",
    year=2015,
}


@article{paxos,
    author = "Leslie Lamport",
    title = "Paxos made simple",
    year = 2001
}

@article{flp,
    title={Impossibility of distributed consensus with one faulty process},
    author={Fischer, Michael J and Lynch, Nancy A and Paterson, Michael S},
    journal={Journal of the ACM (JACM)},
    volume={32},
    number={2},
    pages={374--382},
    year={1985},
    publisher={ACM New York, NY, USA}
}

@inproceedings{ben_or,
    author = {Ben-Or, Michael},
    title = {Another Advantage of Free Choice (Extended Abstract): Completely Asynchronous Agreement Protocols},
    year = {1983},
    isbn = {0897911105},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/800221.806707},
    doi = {10.1145/800221.806707},
    abstract = {Recently, Fischer, Lynch and Paterson [3] proved that no completely asynchronous consensus protocol can tolerate even a single unannounced process death. We exhibit here a probabilistic solution for this problem, which guarantees that as long as a majority of the processes continues to operate, a decision will be made (Theorem 1). Our solution is completely asynchronous and is rather strong: As in [4], it is guaranteed to work with probability 1 even against an adversary scheduler who knows all about the system.},
    booktitle = {Proceedings of the Second Annual ACM Symposium on Principles of Distributed Computing},
    pages = {27–30},
    numpages = {4},
    location = {Montreal, Quebec, Canada},
    series = {PODC '83}
}


@article{partial_sync,
    author = {Dwork, Cynthia and Lynch, Nancy and Stockmeyer, Larry},
    title = {Consensus in the Presence of Partial Synchrony},
    year = {1988},
    issue_date = {April 1988},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {35},
    number = {2},
    issn = {0004-5411},
    url = {https://doi.org/10.1145/42282.42283},
    doi = {10.1145/42282.42283},
    abstract = {The concept of partial synchrony in a distributed system is introduced. Partial synchrony lies between the cases of a synchronous system and an asynchronous system. In a synchronous system, there is a known fixed upper bound Δ on the time required for a message to be sent from one processor to another and a known fixed upper bound Φ on the relative speeds of different processors. In an asynchronous system no fixed upper bounds Δ and Φ exist. In one version of partial synchrony, fixed bounds Δ and Φ exist, but they are not known a priori. The problem is to design protocols that work correctly in the partially synchronous system regardless of the actual values of the bounds Δ and Φ. In another version of partial synchrony, the bounds are known, but are only guaranteed to hold starting at some unknown time T, and protocols must be designed to work correctly regardless of when time T occurs. Fault-tolerant consensus protocols are given for various cases of partial synchrony and various fault models. Lower bounds that show in most cases that our protocols are optimal with respect to the number of faults tolerated are also given. Our consensus protocols for partially synchronous processors use new protocols for fault-tolerant “distributed clocks” that allow partially synchronous processors to reach some approximately common notion of time.},
    journal = {J. ACM},
    month = apr,
    pages = {288–323},
    numpages = {36}
}

@inproceedings{gafni,
  title={Round-by-round fault detectors (extended abstract) unifying synchrony and asynchrony},
  author={Gafni, Eli},
  booktitle={Proceedings of the seventeenth annual ACM symposium on Principles of distributed computing},
  pages={143--152},
  year={1998}
}

@article{closed_communic,
    title={Decomposition of distributed programs into communication-closed layers},
    author={Elradn Tzilla and Francez, Nissim},
    year={1982}
}
@inproceedings{model_checking,
  title={Using bounded model checking to verify consensus algorithms},
  author={Tsuchiya, Tatsuhiro and Schiper, Andre},
  booktitle={International Symposium on Distributed Computing},
  pages={466--480},
  year={2008},
  organization={Springer}
}
